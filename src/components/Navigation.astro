---
import CTAButton from './CTAButton.astro';
---

<nav class="bg-bg shadow-md border-b border-surface sticky top-0 z-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <div class="flex-shrink-0">
        <a href="/" class="text-2xl font-bold text-text-primary">
          Clay Target Instruction
        </a>
      </div>
      
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-4">
          <a href="/" class="text-text-primary hover:text-primary px-3 py-2 rounded-md text-sm font-medium">Home</a>
          
          <div class="relative" data-dropdown>
            <button
              class="text-text-primary hover:text-primary px-3 py-2 rounded-md text-sm font-medium flex items-center"
              aria-haspopup="true"
              aria-expanded="false"
              data-dropdown-button
            >
              Instructors
              <svg class="ml-1 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </button>
            <div
              class="absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-surface ring-1 ring-black ring-opacity-5 opacity-0 invisible transition-all duration-200 z-10"
              data-dropdown-menu
            >
              <div class="py-1">
                <a href="/anthony-matarese-jr" class="block px-4 py-2 text-sm text-text-primary hover:bg-surface-contrast hover:text-primary">Anthony Matarese Jr.</a>
                <a href="/zach-kienbaum" class="block px-4 py-2 text-sm text-text-primary hover:bg-surface-contrast hover:text-primary">Zach Kienbaum</a>
                <a href="/george-digweed" class="block px-4 py-2 text-sm text-text-primary hover:bg-surface-contrast hover:text-primary">George Digweed</a>
              </div>
            </div>
          </div>
          
          <a href="/about" class="text-text-primary hover:text-primary px-3 py-2 rounded-md text-sm font-medium">About</a>
          <a href="/contact" class="text-text-primary hover:text-primary px-3 py-2 rounded-md text-sm font-medium">Contact</a>
        </div>
      </div>
      
      <div class="hidden md:block">
        <CTAButton 
          text="Access Training"
          href="https://digital.claytargetinstruction.com"
          variant="secondary"
          size="small"
          external={true}
        />
      </div>
      
      <div class="md:hidden">
        <button
          type="button"
          class="mobile-menu-button inline-flex items-center justify-center p-2 rounded-md text-text-secondary hover:text-primary hover:bg-surface"
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
  </div>
  
  <div class="mobile-menu hidden md:hidden" id="mobile-menu">
    </div>
</nav>

<script is:inline>
  // Script remains the same
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.querySelector('.mobile-menu-button');
    const mobileMenu = document.querySelector('.mobile-menu');
    mobileMenuButton?.addEventListener('click', () => {
      const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
      mobileMenuButton.setAttribute('aria-expanded', !isExpanded);
      mobileMenu?.classList.toggle('hidden');
    });
    const dropdowns = document.querySelectorAll('[data-dropdown]');
    dropdowns.forEach(dropdown => {
      const button = dropdown.querySelector('[data-dropdown-button]');
      const menu = dropdown.querySelector('[data-dropdown-menu]');
      button?.addEventListener('click', (e) => {
        e.stopPropagation();
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        dropdowns.forEach(d => {
          d.querySelector('[data-dropdown-button]').setAttribute('aria-expanded', 'false');
          d.querySelector('[data-dropdown-menu]').classList.add('opacity-0', 'invisible');
        });
        button.setAttribute('aria-expanded', !isExpanded);
        menu?.classList.toggle('opacity-0');
        menu?.classList.toggle('invisible');
      });
    });
    document.addEventListener('click', () => {
      dropdowns.forEach(dropdown => {
        dropdown.querySelector('[data-dropdown-button]').setAttribute('aria-expanded', 'false');
        dropdown.querySelector('[data-dropdown-menu]').classList.add('opacity-0', 'invisible');
      });
    });
  });
</script>