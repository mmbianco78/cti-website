---
// src/components/CTAButton.astro
export interface Props {
  text: string;
  href: string;
  variant?: 'primary' | 'secondary' | 'ghost';
  size?: 'small' | 'medium' | 'large';
  external?: boolean;
  trackingId?: string;
  className?: string;
  usePulse?: boolean; // The optional pulse prop
  withArrow?: boolean;
}

const { 
  text, 
  href, 
  variant = 'primary',
  size = 'medium', 
  external = false,
  trackingId,
  className = '',
  usePulse = false,
  withArrow = false
} = Astro.props;

const baseClasses = 'group relative overflow-hidden inline-flex items-center justify-center cursor-pointer transition-all duration-300 ease-in-out';

const variantClasses = {
  // New primary style from the .hero-cta reference
  primary: `
    font-extrabold text-white uppercase tracking-wider rounded-lg
    bg-[linear-gradient(90deg,#D65A00,#FF6600)]
    shadow-[0_10px_25px_rgba(255,102,0,0.4)]
    hover:-translate-y-px hover:shadow-[0_15px_30px_rgba(255,102,0,0.4)]
  `,
  secondary: `
    font-bold border-2 border-primary text-primary 
    rounded-lg hover:bg-primary hover:text-black
  `,
  ghost: 'font-medium text-text-primary rounded-lg hover:text-primary',
};

const sizeClasses = {
  small: 'px-6 py-2 text-sm',
  medium: 'px-8 py-3 text-base',
  large: 'px-12 py-4 text-lg'
};

const pulseClass = usePulse ? 'animate-pulse' : '';

const finalClasses = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${pulseClass} ${className}`.trim();

const target = external ? '_blank' : '_self';
const rel = external ? 'noopener noreferrer' : '';
---

<a 
  href={href}
  class={finalClasses}
  target={target}
  rel={rel}
  data-tracking-id={trackingId}
>
  <span class="absolute top-0 left-[-100%] h-full w-full bg-[linear-gradient(90deg,transparent,rgba(255,255,255,0.2),transparent)] transition-all duration-500 group-hover:left-[100%]"></span>
  
  <span class="relative z-10">{text}</span>
  
  {withArrow && <span class="relative z-10 inline-block transition-transform group-hover:translate-x-1 motion-reduce:transform-none ml-2">â†’</span>}
  
  {external && !withArrow && (
    <svg class="relative z-10 ml-2 inline-block h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
    </svg>
  )}
</a>